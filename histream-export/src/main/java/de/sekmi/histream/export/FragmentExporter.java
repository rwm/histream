package de.sekmi.histream.export;

import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLStreamException;
import javax.xml.xpath.XPath;

import org.w3c.dom.Element;

import de.sekmi.histream.ObservationException;
import de.sekmi.histream.export.config.ExportDescriptor;
import de.sekmi.histream.export.config.ExportException;

/**
 * Export visit fragments.
 * <p>
 * All {@link ObservationException}s generated by this class
 * are caused by either {@link ExportException} or {@link IOException}.
 * </p>
 *
 * @author R.W.Majeed
 *
 */
class FragmentExporter extends VisitFragmentParser {

	TableParser patientParser;
	TableParser visitParser;
	private Element currentPatient;
	
	protected FragmentExporter(XPath xpath, ExportDescriptor desc, ExportWriter writer) throws ExportException, XMLStreamException, ParserConfigurationException {
		super();
		
		try {
			patientParser = desc.getPatientTable().createParser(writer.openPatientTable(), xpath);
			visitParser = desc.getVisitTable().createParser(writer.openVisitTable(), xpath);
		} catch (IOException e) {
			throw new ExportException("Unable to open table for writing", e);
		}
	}

	@Override
	protected void patientFragment(Element patient) throws ObservationException {
		currentPatient = patient;
		try {
			patientParser.writeRow(patient);
		} catch (ExportException | IOException e) {
			throw new ObservationException(e);
		}
	}

	@Override
	protected void visitFragment(Element visit) throws ObservationException {
		// move visit to patient
		// this allows XPath expressions to access the patient via
		// the parent element. E.g. '../@id' to get the patient id
		currentPatient.appendChild(visit);
		try {
			visitParser.writeRow(visit);
		} catch (ExportException | IOException e) {
			throw new ObservationException(e);
		} finally {
			// remove visit from patient
			currentPatient.removeChild(visit);
		}
		// TODO check for repeating concepts and write to separate parsers
	}

	@Override
	public void close(){
		super.close();
		try{
			patientParser.close();
		}catch( IOException e ){
			reportError(new ObservationException(e));
		}
		try{
			visitParser.close();
		}catch( IOException e ){
			reportError(new ObservationException(e));
		}
	}
}
